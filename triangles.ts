#!/usr/bin/env bun

import {
  Bool,
  Nat,
  Real,
  Vec,
  add,
  and,
  compile,
  div,
  fn,
  geq,
  gt,
  iadd,
  ieq,
  ileq,
  ilt,
  leq,
  lt,
  mul,
  neg,
  not,
  or,
  select,
  sqrt,
  sub,
  vec,
  vjp,
} from "rose";
import seedrandom from "seedrandom";
import * as optimizer from "./optimizer.js";

// UV map
const strength = 1;
const delta = 1;
const numTriangles = 248;
const size = 7;

const referece: number[][] = [[0.1791422993484788, 0.16636967225597338, 0.1592577933930393], [0.1865611557351905, 0.14939401445941536, 0.15101289559918385], [0.15101289559918385, 0.16636967225597338, 0.2632814333413771], [0.2632814333413771, 0.12774503123178607, 0.1844129351605792], [0.1844129351605792, 0.16484706728689472, 0.19110851656127203], [0.2504498566678767, 0.16484706728689472, 0.14383644030596002], [0.14383644030596002, 0.12774503123178607, 0.15357174663544076], [0.292292126900281, 0.22502922462935784, 0.1791422993484788], [0.196674666946305, 0.24158757095272923, 0.12610576706082868], [0.196674666946305, 0.1078318385311593, 0.21842337251239852], [0.21842337251239852, 0.12828571902207195, 0.1870738559258348], [0.12828571902207195, 0.1567887446382871, 0.09013901085301525], [0.07218722617257155, 0.1567887446382871, 0.1172703600993874], [0.1870738559258348, 0.23047399527374013, 0.18534794053627893], [0.17660353348673408, 0.23047399527374013, 0.11037487979354721], [0.11037487979354721, 0.09013901085301525, 0.12304507645233106], [0.12304507645233106, 0.11088171913548237, 0.17043404607225635], [0.1079894041017451, 0.11088171913548237, 0.07218722617257155], [0.17660353348673408, 0.12141158765537993, 0.19067437601576148], [0.10460753634896486, 0.12141158765537993, 0.11917717563359186], [0.11917717563359186, 0.17043404607225635, 0.09413706941986245], [0.09413706941986245, 0.11438884441430466, 0.09911814978478965], [0.09911814978478965, 0.11487884198685154, 0.17172567281673407], [0.17172567281673407, 0.14831800593103994, 0.10460753634896486], [0.14311059892265143, 0.14831800593103994, 0.20614426308815872], [0.20614426308815872, 0.1725589574619643, 0.17909219988877237], [0.1725589574619643, 0.0609903330373142, 0.18912324672398814], [0.11957619755228259, 0.0609903330373142, 0.11487884198685154], [0.18912324672398814, 0.14586846954329263, 0.14392667656080993], [0.17495237565691985, 0.14586846954329263, 0.18831756360706903], [0.18831756360706903, 0.11957619755228259, 0.2450069328162777], [0.2450069328162777, 0.11438884441430466, 0.29771548015338406], [0.29771548015338406, 0.1079894041017451, 0.2522620635922294], [0.2522620635922294, 0.1172703600993874, 0.18173569461085518], [0.18173569461085518, 0.1078318385311593, 0.13195441901823524], [0.13195441901823524, 0.12610576706082868, 0.17306084666625204], [0.292292126900281, 0.18534794053627893, 0.2839603743909526], [0.1863557885819488, 0.20954723769832906, 0.17193072942612675], [0.2438220848367309, 0.14392667656080993, 0.21576890204033108], [0.30879944700262985, 0.29646386177036826, 0.1256611091309081], [0.10238586293312178, 0.29646386177036826, 0.3226940135249491], [0.3226940135249491, 0.17495237565691985, 0.314528723891539], [0.21596656883879042, 0.1799378575772481, 0.12634842056587015], [0.19067437601576148, 0.14311059892265143, 0.1593648615755682], [0.1593648615755682, 0.17719401894533576, 0.20954723769832906], [0.18859262744137165, 0.16755846685359976, 0.10803110573421387], [0.11002094872027281, 0.16755846685359976, 0.2078399748586638], [0.2078399748586638, 0.19110851656127203, 0.22390864204179345], [0.22390864204179345, 0.2401317916603297, 0.09686397016951143], [0.13852434925369617, 0.2401317916603297, 0.3109795046155936], [0.3109795046155936, 0.1969852779702077, 0.3687979468608251], [0.3687979468608251, 0.23459633612716546, 0.22574017170430696], [0.15461769645186157, 0.23459633612716546, 0.24548670296464128], [0.24548670296464128, 0.18854794086240273, 0.1365368233598032], [0.10641623391298198, 0.18854794086240273, 0.1868419736285495], [0.1868419736285495, 0.221241779611266, 0.10187838514473817], [0.09832559556519349, 0.221241779611266, 0.26235290621872287], [0.26235290621872287, 0.229551201797355, 0.08779583294803918], [0.08665693820323912, 0.229551201797355, 0.180585506689352], [0.0926039080776292, 0.180585506689352, 0.16031264366231374], [0.16031264366231374, 0.1969852779702077, 0.11370382145293097], [0.11370382145293097, 0.2504498566678767, 0.2098970465069959], [0.2098970465069959, 0.22421761178732147, 0.0926039080776292], [0.11274669924890263, 0.22421761178732147, 0.17599240932370494], [0.17599240932370494, 0.21439421990305613, 0.09663420840780194], [0.09663420840780194, 0.1463464750237942, 0.1491316490036991], [0.1491316490036991, 0.08779583294803918, 0.1028515271301428], [0.15720085221511998, 0.21439421990305613, 0.18672631293623296], [0.1463464750237942, 0.08868435109420375, 0.14001818887305323], [0.14001818887305323, 0.09377044935820666, 0.09832559556519349], [0.10187838514473817, 0.09377044935820666, 0.1307963602510544], [0.1307963602510544, 0.20692219535216613, 0.16732850024491222], [0.16732850024491222, 0.12015490745388678, 0.10641623391298198], [0.1365368233598032, 0.12015490745388678, 0.1661832913895076], [0.17336288894974033, 0.20475401050773093, 0.13625011373940207], [0.08868435109420375, 0.21720751599417545, 0.1866543691172537], [0.13625011373940207, 0.21720751599417545, 0.15720085221511998], [0.20692219535216613, 0.1866543691172537, 0.08863470842734243], [0.17336288894974033, 0.31917847554503104, 0.295919401537395], [0.2625855580332056, 0.31917847554503104, 0.18672631293623296], [0.20740287721869555, 0.22848820414452994, 0.10803110573421387], [0.12634842056587015, 0.22848820414452994, 0.25565938926627046], [0.25565938926627046, 0.2126072538420089, 0.09726306928372146], [0.1914275195185896, 0.2126072538420089, 0.11604398297407927], [0.11604398297407927, 0.09399900122997266, 0.07801917544309218], [0.11608408819058708, 0.09399900122997266, 0.144771139646797], [0.144771139646797, 0.20361017715995045, 0.1684392276895439], [0.15363217157991357, 0.20361017715995045, 0.2248187798342532], [0.2248187798342532, 0.20740287721869555, 0.11002094872027281], [0.09686397016951143, 0.09801489705019335, 0.15363217157991357], [0.14667275952268707, 0.09801489705019335, 0.13852434925369617], [0.14667275952268707, 0.07977887008732325, 0.09858869415409657], [0.07170710031677478, 0.07977887008732325, 0.113472817652555], [0.113472817652555, 0.2732162588935, 0.1807552832956481], [0.15204092262940264, 0.2732162588935, 0.24834849512119053], [0.24834849512119053, 0.22574017170430696, 0.1908356124099745], [0.1908356124099745, 0.15461769645186157, 0.27131064479531575], [0.07170710031677478, 0.13306481927030903, 0.10783224808006182], [0.10076633161552524, 0.13306481927030903, 0.15717548219264355], [0.15717548219264355, 0.2318265288746955, 0.08907226508852235], [0.047206202749215075, 0.2318265288746955, 0.25366927988838145], [0.25366927988838145, 0.1807552832956481, 0.23248093622058563], [0.10089482385538913, 0.11577898196710835, 0.1684392276895439], [0.11608408819058708, 0.14395833344006176, 0.06301818254281855], [0.07176910107170077, 0.14395833344006176, 0.13710994409961663], [0.13710994409961663, 0.1529226719680244, 0.060704474464737763], [0.12905901072861978, 0.1529226719680244, 0.17043194516254867], [0.17043194516254867, 0.1187008564985527, 0.08907226508852235], [0.1187008564985527, 0.11577898196710835, 0.10076633161552524], [0.09726306928372146, 0.08128439197219844, 0.10238586293312178], [0.1256611091309081, 0.08128439197219844, 0.16371528111865427], [0.16371528111865427, 0.10037847173697156, 0.14831989203545826], [0.13836870158778683, 0.10037847173697156, 0.1914275195185896], [0.10089482385538913, 0.09858869415409657, 0.10783224808006182], [0.08665693820323912, 0.11274669924890263, 0.1028515271301428], [0.30879944700262985, 0.22200360486947054, 0.21576890204033108], [0.26001395635067365, 0.22200360486947054, 0.1630204006831354], [0.1630204006831354, 0.19432642054463412, 0.18831988641139308], [0.10175091617592442, 0.19432642054463412, 0.14831989203545826], [0.13836870158778683, 0.10738785750358373, 0.10175091617592442], [0.07735021775664241, 0.10738785750358373, 0.1512975330162723], [0.1512975330162723, 0.1261407875732905, 0.1087116794737346], [0.10559743088077472, 0.07801917544309218, 0.06301818254281855], [0.10506225541844225, 0.067920030256177, 0.09260310041467293], [0.08349676859591634, 0.067920030256177, 0.09889577077489208], [0.09889577077489208, 0.0809095386928513, 0.07278301461254541], [0.07599547564618568, 0.0809095386928513, 0.10621278925515515], [0.10621278925515515, 0.08665503526997147, 0.060704474464737763], [0.07176910107170077, 0.08665503526997147, 0.111120425777622], [0.07735021775664241, 0.1909735379705785, 0.18831988641139308], [0.17096717890870164, 0.1909735379705785, 0.11914065942825729], [0.11914065942825729, 0.1590112962968355, 0.15794676530084434], [0.14386629339077311, 0.1590112962968355, 0.1087116794737346], [0.15794676530084434, 0.10460489033023265, 0.15500674853050755], [0.0750746293630545, 0.10460489033023265, 0.06955606455946166], [0.06955606455946166, 0.11726982022349143, 0.09246525814731714], [0.08349676859591634, 0.11726982022349143, 0.0844224664411672], [0.0844224664411672, 0.14386629339077311, 0.09260310041467293], [0.26001395635067365, 0.1944593640641664, 0.2021757221816952], [0.2915502979598718, 0.1944593640641664, 0.3435314434098428], [0.3435314434098428, 0.17096717890870164, 0.28356175383723736], [0.2021757221816952, 0.14210668536789534, 0.3040398455734708], [0.2728533848836038, 0.14210668536789534, 0.2915502979598718], [0.17200574666272056, 0.15258415563304728, 0.28356175383723736], [0.16516436465064124, 0.15258415563304728, 0.1867233844292139], [0.1867233844292139, 0.1529829491315944, 0.3038872118363983], [0.15500674853050755, 0.1529829491315944, 0.17200574666272056], [0.2728533848836038, 0.2705403646967491, 0.0962782706891332], [0.07599547564618568, 0.08931702825111235, 0.057852872567920065], [0.07122181960438811, 0.08931702825111235, 0.10911187473070932], [0.10911187473070932, 0.12905901072861978, 0.07768685516868346], [0.07768685516868346, 0.047206202749215075, 0.07570641923905792], [0.09246525814731714, 0.12141354737079382, 0.08960864178532113], [0.09876553057296864, 0.12141354737079382, 0.08498676987037453], [0.08498676987037453, 0.1047299579767413, 0.08085923789283447], [0.057852872567920065, 0.1047299579767413, 0.07278301461254541], [0.07122181960438811, 0.10259538537868064, 0.1176000688943676], [0.10259538537868064, 0.07570641923905792, 0.13720307831459175], [0.08085923789283447, 0.1176000688943676, 0.1023872492024764], [0.1023872492024764, 0.15851780247029038, 0.09876553057296864], [0.2658334220861064, 0.15851780247029038, 0.16584639904140214], [0.16584639904140214, 0.13720307831459175, 0.20526433432040744], [0.08960864178532113, 0.11197552103477794, 0.0750746293630545], [0.3038872118363983, 0.11197552103477794, 0.3095358900652556], [0.3095358900652556, 0.25540276173293425, 0.17591457259903173], [0.07994119171616094, 0.25540276173293425, 0.2658334220861064], [0.24769945757796888, 0.17591457259903173, 0.1885718712246341], [0.22888910144251082, 0.16537685725324447, 0.1646876806784284], [0.12391983030931733, 0.16537685725324447, 0.198169338341253], [0.198169338341253, 0.21119501231174945, 0.2576037151658531], [0.21119501231174945, 0.1885718712246341, 0.07994119171616094], [0.19035955915845149, 0.16368804246187318, 0.23248093622058563], [0.20526433432040744, 0.16368804246187318, 0.11738139449248339], [0.11738139449248339, 0.20071315771829706, 0.2576037151658531], [0.22720093276051925, 0.20071315771829706, 0.19035955915845149], [0.15204092262940264, 0.14075729557863065, 0.2107233846283084], [0.3016520810846496, 0.14075729557863065, 0.27131064479531575], [0.2107233846283084, 0.18873527202873341, 0.22720093276051925], [0.12391983030931733, 0.322166817236428, 0.2835579717733924], [0.23361155947043802, 0.322166817236428, 0.18873527202873341], [0.3016520810846496, 0.32930145636673097, 0.23361155947043802], [0.32930145636673097, 0.1661832913895076, 0.41331285515091354], [0.41331285515091354, 0.23798649014177253, 0.3062597945454153], [0.295919401537395, 0.244443401379215, 0.3230546722115159], [0.23120586328441153, 0.244443401379215, 0.1715511946366157], [0.3276130081881518, 0.3241811559478589, 0.26648922743893416], [0.17193072942612675, 0.3241811559478589, 0.23120586328441153], [0.26648922743893416, 0.2832227217195859, 0.17472941311997245], [0.3772162005286226, 0.2832227217195859, 0.17719401894533576], [0.3772162005286226, 0.2614277121893545, 0.13761655516110702], [0.24433194182742457, 0.2614277121893545, 0.17909219988877237], [0.13761655516110702, 0.25307063940560154, 0.27488283979406575], [0.36706713058785306, 0.25307063940560154, 0.24433194182742457], [0.36706713058785306, 0.2438220848367309, 0.3123402219598526], [0.27488283979406575, 0.1800108580752839, 0.1790925369418], [0.1836592253305017, 0.1800108580752839, 0.09473223101985935], [0.09473223101985935, 0.2573322212607663, 0.2214177945717101], [0.0962782706891332, 0.2573322212607663, 0.20515497016082743], [0.20515497016082743, 0.3123402219598526, 0.3040398455734708], [0.1948134668985694, 0.1790925369418, 0.25882552491647726], [0.17472941311997245, 0.1948134668985694, 0.16426895899374902], [0.17729248283556753, 0.2278459833659571, 0.20800950076859467], [0.20800950076859467, 0.34688126000261243, 0.21503925506055863], [0.21503925506055863, 0.3062597945454153, 0.4547568566365987], [0.44868283289991157, 0.20358415665097812, 0.3766538975266286], [0.3766538975266286, 0.1847440371270478, 0.4003982010424123], [0.17729248283556753, 0.4003982010424123, 0.35382383171007575], [0.35382383171007575, 0.16745563380191184, 0.3878688446601506], [0.22877327136927514, 0.119756651030329, 0.2214177945717101], [0.1836592253305017, 0.119756651030329, 0.2582921737122517], [0.2582921737122517, 0.17998715885306935, 0.13729988118348832], [0.34688126000261243, 0.1646876806784284, 0.2835579717733924], [0.1592577933930393, 0.14939401445941536, 0.24158757095272923], [0.1865611557351905, 0.18859262744137165, 0.1799378575772481], [0.2894017175947526, 0.2670870838623613, 0.16636591460040998], [0.2894017175947526, 0.27527116770730076, 0.20358415665097812], [0.2816577824954425, 0.27527116770730076, 0.19385495303424902], [0.1847440371270478, 0.2816577824954425, 0.2716301606177966], [0.2716301606177966, 0.13159155205766102, 0.2731078439987107], [0.2731078439987107, 0.2788243061562318, 0.16745563380191184], [0.28913017013035835, 0.2788243061562318, 0.20112160444495292], [0.2614808246143682, 0.1392121099223771, 0.3276130081881518], [0.4547568566365987, 0.27002865261910636, 0.44868283289991157], [0.21881434278858414, 0.20475401050773093, 0.2033495445212504], [0.23798649014177253, 0.08863470842734243, 0.21881434278858414], [0.27002865261910636, 0.19647709539282182, 0.14785137086780767], [0.2996898822873572, 0.2670870838623613, 0.14785137086780767], [0.2706705197491777, 0.1392121099223771, 0.2996898822873572], [0.2033495445212504, 0.16044574619789706, 0.19647709539282182], [0.3502756290404601, 0.2516240840420487, 0.23309267102096975], [0.13729988118348832, 0.3502756290404601, 0.25882552491647726], [0.32443432105333736, 0.23309267102096975, 0.4256753145558831], [0.4256753145558831, 0.274283544860059, 0.20249684724027187], [0.12233702972526347, 0.274283544860059, 0.22926681771900612], [0.2614808246143682, 0.16426895899374902, 0.3744829356145617], [0.3744829356145617, 0.3006578566532611, 0.16636591460040998], [0.19385495303424902, 0.3006578566532611, 0.32443432105333736], [0.15357174663544076, 0.22502922462935784, 0.2625855580332056], [0.1715511946366157, 0.2839603743909526, 0.1863557885819488], [0.17306084666625204, 0.21596656883879042, 0.314528723891539], [0.3230546722115159, 0.2706705197491777, 0.16044574619789706], [0.1261407875732905, 0.1100225470645449, 0.04277297843218309], [0.04277297843218309, 0.09845819424959003, 0.10506225541844225], [0.10559743088077472, 0.04387663250398781, 0.1100225470645449], [0.09845819424959003, 0.04387663250398781, 0.111120425777622], [0.20249684724027187, 0.15124058160085244, 0.13159155205766102], [0.20112160444495292, 0.2496904645995199, 0.24112325089424708], [0.12233702972526347, 0.2496904645995199, 0.15124058160085244]];

const sqr = (x: Real): Real => mul(x, x);

const max = (a: Real, b: Real) => select(gt(a, b), Real, a, b);

const min = (a: Real, b: Real): Real => select(lt(a, b), Real, a, b);

const clamp = (x: Real, l: Real, h: Real): Real =>
  select(lt(x, l), Real, l, select(lt(h, x), Real, h, x));

const all = (xs: Bool[]): Bool => xs.reduce((a, b) => and(a, b));

const vnot = (xs: Bool[]): Bool[] => xs.map((x) => not(x));

const vadd = (a: Vec<Real> | Real[], b: Vec<Real> | Real[]): Real[] => {
  return [add(a[0], b[0]), add(a[1], b[1])];
};

const vsub = (a: Vec<Real> | Real[], b: Vec<Real> | Real[]): Real[] => {
  return [sub(a[0], b[0]), sub(a[1], b[1])];
};

const vmul = (v: Real[], c: Real): Real[] => v.map((x) => mul(x, c));

const dot = (a: Real[], b: Real[]): Real =>
  a.map((x, i) => mul(x, b[i])).reduce((a, b) => add(a, b));

const norm = (v: Real[]): Real => sqrt(dot(v, v));

const norm2 = (v: Real[]): Real => dot(v, v);

const cross = (a: Real[], b: Real[]): Real =>
  sub(mul(a[0], b[1]), mul(a[1], b[0]));

const reorder = fn([Vec(3, Vec(2, Real))], Vec(5, Vec(2, Real)), (p) => {
  let i: Nat = 0;
  for (let j = 1; j < 3; ++j) {
    const [xi, yi] = p[i] as any;
    const [xj, yj] = p[j];
    i = select(or(lt(yj, yi), and(leq(yj, yi), lt(xj, xi))), 3, j, i);
  }
  const [a, b, c] = p;
  return select(
    ieq(3, i, 0),
    Vec(5, Vec(2, Real)),
    [a, b, c, a, b],
    select(
      ieq(3, i, 1),
      Vec(5, Vec(2, Real)),
      [b, c, a, b, c],
      [c, a, b, c, a],
    ),
  );
});

// note: only works on triangles
const minkowskiSum = (
  left: Vec<Vec<Real>>,
  right: Vec<Vec<Real>>,
): Real[][] => {
  const p = reorder(left);
  const q = reorder(right);
  const r: Real[][] = [];
  let i: Nat = 0;
  let j: Nat = 0;
  for (let k = 0; k < 6; ++k) {
    r.push(vadd(p[i], q[j]));
    const i1 = iadd(5, i, 1);
    const j1 = iadd(5, j, 1);
    const z = cross(vsub(p[i1], p[i]), vsub(q[j1], q[j]));
    ({ i, j } = select(
      and(ilt(5, i, 3), geq(z, 0)),
      { i: 5, j: 5 },
      { i: i1, j },
      { i, j: j1 },
    ));
  }
  return r;
};

// https://iquilezles.org/articles/distfunctions2d/
const sdPolygon = (v: Real[][], p: Real[]): Real => {
  const N = v.length;
  let d = dot(vsub(p, v[0]), vsub(p, v[0]));
  let s: Real = 1.0;
  for (let i = 0, j = N - 1; i < N; j = i, i++) {
    const e = vsub(v[j], v[i]);
    const w = vsub(p, v[i]);
    const b = vsub(w, vmul(e, clamp(div(dot(w, e), dot(e, e)), 0.0, 1.0)));
    d = min(d, dot(b, b));
    const c = [
      geq(p[1], v[i][1]),
      lt(p[1], v[j][1]),
      gt(mul(e[0], w[1]), mul(e[1], w[0])),
    ];
    s = select(or(all(c), all(vnot(c))), Real, neg(s), s);
  }
  return mul(s, sqrt(d));
};

type Vec2 = number[];

interface Triangle {
  a: Vec2;
  b: Vec2;
  c: Vec2;
}

const clockwise = (a: Real[], b: Real[], c: Real[]): Bool =>
  lt(
    mul(sub(b[0], a[0]), sub(c[1], a[1])),
    mul(sub(c[0], a[0]), sub(b[1], a[1])),
  );

const fanout = fn([Real], Vec(numTriangles, Real), (x) =>
  vec(numTriangles, Real, () => x),
);

const sum = fn([Vec(numTriangles, Real)], Real, (xs) =>
  vjp(fanout)(0).grad(xs),
);

const lagrangian = fn(
  [
    {
      ax: Vec(numTriangles, Real),
      ay: Vec(numTriangles, Real),
      bx: Vec(numTriangles, Real),
      by: Vec(numTriangles, Real),
      cx: Vec(numTriangles, Real),
      cy: Vec(numTriangles, Real),
      weight: Real,
    },
  ],
  Real,
  ({ ax, ay, bx, by, cx, cy, weight }) => {

    const discrepancy = referece.reduce((sum, ref, i) => {
      const a = [ax[i], ay[i]];
      const b = [bx[i], by[i]];
      const c = [cx[i], cy[i]];
  
      const term1 = sqr(sub(norm(vsub(b, a)), ref[0]));
      const term2 = sqr(sub(norm(vsub(c, b)), ref[1]));
      const term3 = sqr(sub(norm(vsub(a, c)), ref[2]));
  
      return add(sum, add(add(term1, term2), term3));
    }, 0);

    const canvas = sum(
      vec(numTriangles, Real, (i) => {
        return [
          [ax[i], ay[i]],
          [bx[i], by[i]],
          [cx[i], cy[i]],
        ]
          .flatMap((v) => v.map((x) => sqr(min(0, min(x, sub(size, x))))))
          .reduce(add);
      }),
    );
    const disjoint = sum(
      vec(numTriangles, Real, (i) => {
        const a1 = [ax[i], ay[i]];
        const b1 = [bx[i], by[i]];
        const c1 = [cx[i], cy[i]];
        const p = select(
          clockwise(a1, b1, c1),
          Vec(3, Vec(2, Real)),
          [c1, b1, a1],
          [a1, b1, c1],
        );
        return sum(
          vec(numTriangles, Real, (j) => {
            const a2 = [neg(ax[j]), neg(ay[j])];
            const b2 = [neg(bx[j]), neg(by[j])];
            const c2 = [neg(cx[j]), neg(cy[j])];
            const q = select(
              clockwise(a2, b2, c2),
              Vec(3, Vec(2, Real)),
              [c2, b2, a2],
              [a2, b2, c2],
            );
            return select(
              ileq(numTriangles, i, j),
              Real,
              0,
              sqr(max(0, neg(sdPolygon(minkowskiSum(p, q), [0, 0])))),
            );
          }),
        );
      }),
    );
    return add(discrepancy, mul(weight, add(canvas, disjoint)));
  },
);

const compiled = await compile(
  fn(
    [
      {
        ax: Vec(numTriangles, Real),
        ay: Vec(numTriangles, Real),
        bx: Vec(numTriangles, Real),
        by: Vec(numTriangles, Real),
        cx: Vec(numTriangles, Real),
        cy: Vec(numTriangles, Real),
        weight: Real,
      },
    ],
    {
      z: Real,
      ax: Vec(numTriangles, Real),
      ay: Vec(numTriangles, Real),
      bx: Vec(numTriangles, Real),
      by: Vec(numTriangles, Real),
      cx: Vec(numTriangles, Real),
      cy: Vec(numTriangles, Real),
    },
    (inputs) => {
      const { ret, grad } = vjp(lagrangian)(inputs);
      const { ax, ay, bx, by, cx, cy } = grad(1);
      return { z: ret, ax, ay, bx, by, cx, cy };
    },
  ),
);

const grad: optimizer.Fn = (
  x: Float64Array,
  weight: number,
  dx: Float64Array,
): number => {
  const { z, ax, ay, bx, by, cx, cy } = compiled({
    ax: x.subarray(0, numTriangles) as any,
    ay: x.subarray(numTriangles, numTriangles * 2) as any,
    bx: x.subarray(numTriangles * 2, numTriangles * 3) as any,
    by: x.subarray(numTriangles * 3, numTriangles * 4) as any,
    cx: x.subarray(numTriangles * 4, numTriangles * 5) as any,
    cy: x.subarray(numTriangles * 5, numTriangles * 6) as any,
    weight,
  });

  // https://github.com/rose-lang/rose/issues/111
  dx.set(ax as any, 0);
  dx.set(ay as any, numTriangles);
  dx.set(bx as any, numTriangles * 2);
  dx.set(by as any, numTriangles * 3);
  dx.set(cx as any, numTriangles * 4);
  dx.set(cy as any, numTriangles * 5);

  return z;
};

const init = (seed: string): Triangle[] => {
  const rng = seedrandom(seed);
  const triangles: Triangle[] = [];
  for (let i = 0; i < numTriangles; ++i) {
    const a = [rng() * size, rng() * size];
    const b = [rng() * size, rng() * size];
    const c = [rng() * size, rng() * size];
    triangles.push({ a, b, c });
  }
  return triangles;
};

const serialize = (triangles: Triangle[]): Float64Array => {
  const x = new Float64Array(numTriangles * 6);
  for (let i = 0; i < numTriangles; ++i) {
    const { a, b, c } = triangles[i];
    x[i] = a[0];
    x[i + numTriangles] = a[1];
    x[i + numTriangles * 2] = b[0];
    x[i + numTriangles * 3] = b[1];
    x[i + numTriangles * 4] = c[0];
    x[i + numTriangles * 5] = c[1];
  }
  return x;
};

const deserialize = (x: Float64Array): Triangle[] => {
  const triangles: Triangle[] = [];
  for (let i = 0; i < numTriangles; ++i) {
    const a = [x[i], x[i + numTriangles]];
    const b = [x[i + numTriangles * 2], x[i + numTriangles * 3]];
    const c = [x[i + numTriangles * 4], x[i + numTriangles * 5]];
    triangles.push({ a, b, c });
  }
  return triangles;
};

const optimize = (triangles: Triangle[]): Triangle[] => {
  const x = serialize(triangles);
  let params = optimizer.start(numTriangles * 6);
  let step = 0;
  while (params.optStatus !== "EPConverged") {
    console.log(params.lastEPenergy);
    Bun.write(`out/triangles${step}.svg`, svg(deserialize(x)));
    step++;
    params = optimizer.stepUntil(grad, x, params, () => false);
  }
  return deserialize(x);
};

const hueFactor = 360 / numTriangles;

const svg = (triangles: Triangle[]): string => {
  const lines = [
    `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}">`,
  ];
  for (let i = 0; i < numTriangles; ++i) {
    const { a, b, c } = triangles[i];
    const hue = i * hueFactor;
    lines.push(
      `  <polygon points="${a} ${b} ${c}" fill="hsl(${hue} 50% 50%)" />`,
    );
  }
  lines.push("</svg>", "");
  return lines.join("\n");
};

const main = () => {
  const original = init("");
  const optimized = optimize(original);
  Bun.write("out/triangles.svg", svg(optimized));
};

main();
